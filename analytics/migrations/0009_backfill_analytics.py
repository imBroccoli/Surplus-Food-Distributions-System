# Generated by Django 5.1.6 on 2025-03-15 16:54

from decimal import Decimal

from django.db import migrations


def backfill_analytics_data(apps, schema_editor):
    """Backfill DailyAnalytics data from existing transactions"""
    DailyAnalytics = apps.get_model("analytics", "DailyAnalytics")
    Transaction = apps.get_model("transactions", "Transaction")
    FoodRequest = apps.get_model("transactions", "FoodRequest")

    # Clear existing analytics to prevent duplicates
    DailyAnalytics.objects.all().delete()

    # Get all food requests
    food_requests = FoodRequest.objects.all()

    # Track analytics per day/supplier/listing
    analytics_data = {}

    for request in food_requests:
        if request.listing and request.listing.supplier:
            date = request.created_at.date()
            key = (date, request.listing.supplier.id, request.listing.id)

            if key not in analytics_data:
                analytics_data[key] = {
                    "requests_received": 0,
                    "requests_fulfilled": 0,
                    "food_saved_kg": Decimal("0.00"),
                }

            # Increment request count
            analytics_data[key]["requests_received"] += 1

            # Check if request was fulfilled (has an approved transaction)
            transaction = Transaction.objects.filter(
                request=request, status__in=["COMPLETED", "PENDING", "ACCEPTED"]
            ).first()

            if transaction:
                analytics_data[key]["requests_fulfilled"] += 1
                if request.quantity_requested:
                    analytics_data[key]["food_saved_kg"] += Decimal(
                        str(request.quantity_requested)
                    )

    # Create DailyAnalytics records
    for (date, supplier_id, listing_id), data in analytics_data.items():
        DailyAnalytics.objects.create(
            date=date,
            user_id=supplier_id,
            listing_id=listing_id,
            requests_received=data["requests_received"],
            requests_fulfilled=data["requests_fulfilled"],
            food_saved_kg=data["food_saved_kg"],
        )


def reverse_migration(apps, schema_editor):
    """Reverse the migration by clearing all analytics data"""
    DailyAnalytics = apps.get_model("analytics", "DailyAnalytics")
    DailyAnalytics.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("analytics", "0008_impactmetrics_unique_impact_metrics_date"),
        ("transactions", "__first__"),  # Add explicit dependency on transactions app
    ]

    operations = [
        migrations.RunPython(backfill_analytics_data, reverse_migration),
    ]
